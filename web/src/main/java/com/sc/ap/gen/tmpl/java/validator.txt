package #(basePackage).validator.#(tbl.modelName);

import cn.hutool.core.util.StrUtil;
import com.jfinal.core.Controller;
import #(basePackage).Consts;
import #(basePackage).core.CoreValidator;
import #(basePackage).model.#(tbl.className);
import java.util.List;


public class #(tbl.className)Validator extends CoreValidator {
    @Override
    protected void validate(Controller controller) {
        #(tbl.className) #(tbl.modelName)=controller.getModel(#(tbl.className).class,"",true);
        String ak=getActionKey();
        List<#(tbl.className)> list=null;
        if(ak.contains("#(tbl.modelName)/save")||ak.contains("#(tbl.modelName)/update")){
            #for(col:tbl.genCfgColList)
                #if(col.configJSON.isRequired??false&&(col.configJSON.inputType=='text'||col.configJSON.inputType=='textArea'))
                    if(StrUtil.isBlank(#(tbl.modelName).get#(firstCharToUpperCase(col.col))())){
                        addError(Consts.REQ_JSON_CODE.fail.name(), "#(col.note)值不能为空");
                        return;
                    }
                #else if(col.configJSON.isRequired??false&&!(col.configJSON.inputType=='text'||col.configJSON.inputType=='textArea'))
                    if(#(tbl.modelName).get#(firstCharToUpperCase(col.col))()==null){
                        #if(col.configJSON.inputType??''=='select'||col.configJSON.inputType??''=='checkbox'||col.configJSON.inputType??''=='radio')
                            addError(Consts.REQ_JSON_CODE.fail.name(), "#genColLabel(col.note)值不能为空");
                        #else
                            addError(Consts.REQ_JSON_CODE.fail.name(), "#(col.note)值不能为空");
                        #end
                        return;
                    }
                #end

                #if(notBlank((col.configJSON.min??null))&&(col.configJSON.inputType=='text'||col.configJSON.inputType=='textArea'))

                                             if (StrUtil.isNotBlank(#(tbl.modelName).get#(firstCharToUpperCase(col.col))())) {
                                                   int len=StrUtil.totalLength(#(tbl.modelName).get#(firstCharToUpperCase(col.col))());
                                                   if(len<#(col.configJSON.min)){
                                                        addError(Consts.REQ_JSON_CODE.fail.name(), "#(col.note)长度不能小于#(col.configJSON.min)");
                                                        return;
                                                   }
                                             }
                #end
                #if(notBlank((col.configJSON.max??null))&&(col.configJSON.inputType=='text'||col.configJSON.inputType=='textArea'))

                                             if (StrUtil.isNotBlank(#(tbl.modelName).get#(firstCharToUpperCase(col.col))())) {
                                                   int len=StrUtil.totalLength(#(tbl.modelName).get#(firstCharToUpperCase(col.col))());
                                                   if(len>#(col.configJSON.max)){
                                                        addError(Consts.REQ_JSON_CODE.fail.name(), "#(col.note)长度不能大于#(col.configJSON.max)");
                                                        return;
                                                   }
                                             }
                #end
            #end
        }else if(ak.contains("#(tbl.modelName)/del")||ak.contains("#(tbl.modelName)/logicDel")){
            String ids =controller.getPara("ids");
            if(StrUtil.isBlank(ids)){
                addError(Consts.REQ_JSON_CODE.fail.name(), "缺少删除数据的关键数据");
                return;
            }
        }
        if(ak.contains("#(tbl.modelName)/save")){
             #for(col:tbl.genCfgColList)
                   #if(col.configJSON.onlyOne??false)
                       #if(!(col.configJSON.isRequired??false))
                           if(StrUtil.isNotBlank(#(tbl.modelName).get#(firstCharToUpperCase(col.col))())){
                       #end
                       list=#(tbl.className).dao.findByPropEQWithDat("#(col.orgCol)",#(tbl.modelName).get#(firstCharToUpperCase(col.col))());
                       if (!list.isEmpty()) {
                             addError(Consts.REQ_JSON_CODE.fail.name(), "#(col.note)值重复");
                             return;
                       }
                       #if(!(col.configJSON.isRequired??false))
                          }
                       #end
                   #end
             #end
        }else if(ak.contains("#(tbl.modelName)/update")){
            #for(col:tbl.genCfgColList)
                               #if(col.configJSON.onlyOne??false)

                                   #if(!(col.configJSON.isRequired??false))
                                   if(StrUtil.isNotBlank(#(tbl.modelName).get#(firstCharToUpperCase(col.col))())){
                                   #end
                                   list=#(tbl.className).dao.findByPropEQAndIdNEQWithDat("#(col.orgCol)",#(tbl.modelName).get#(firstCharToUpperCase(col.col))(),#(tbl.modelName).getId());
                                   if (!list.isEmpty()) {
                                         addError(Consts.REQ_JSON_CODE.fail.name(), "#(col.note)值重复");
                                         return;
                                   }
                                   #if(!(col.configJSON.isRequired??false))
                                   }
                                   #end
                               #end
                         #end
        }
    }

    @Override
    protected void handleError(Controller controller) {
        controller.renderJson(getErrorJSON());
    }

}

