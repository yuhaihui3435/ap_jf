package #(groupId).#(artifactId).interceptors;

import com.jfinal.aop.Duang;
import com.jfinal.aop.Interceptor;
import com.jfinal.aop.Invocation;
import com.jfinal.plugin.ehcache.CacheKit;
import #(groupId).#(artifactId).Consts;
import #(groupId).#(artifactId).kits.CookieKit;
import #(groupId).#(artifactId).model.Role;
import #(groupId).#(artifactId).model.RoleSer;
import #(groupId).#(artifactId).model.User;
import #(groupId).#(artifactId).core.CoreController;
import #(groupId).#(artifactId).core.CoreException;
import #(groupId).#(artifactId).kits.ReqKit;
import #(groupId).#(artifactId).kits.ResKit;
import #(groupId).#(artifactId).service.role.RoleService;
import #(groupId).#(artifactId).service.ser.SerService;
import #(groupId).#(artifactId).service.user.UserService;

import javax.servlet.http.HttpServletRequest;
import java.util.List;
import java.util.Set;

/**
 *
 * 请求访问控制前置处理
 *
 */
public class AdminAAuthInterceptor implements Interceptor{
    private RoleService roleService= Duang.duang(RoleService.class.getSimpleName(),RoleService.class);
    private SerService serService= Duang.duang(SerService.class.getSimpleName(),SerService.class);
    private UserService userService= Duang.duang(UserService.class.getSimpleName(),UserService.class);

    @Override
    public void intercept(Invocation invocation) {
        CoreController controller=(CoreController) invocation.getController();
        String ak=invocation.getActionKey();
        HttpServletRequest request=controller.getRequest();
        boolean flag=false;
        String userId = CookieKit.get(controller, Consts.USER_ACCESS_TOKEN);
        User user = userService.findByIdInCache(new Integer(userId));
        String[] roleCodes=roleService.findCodesByLoginnameInCache(user.getLoginname());
        Set<String> serSet=serService.findUrlByRoleCodesInCache(roleCodes);

        Set<String> allSer= CacheKit.get(Consts.CACHE_NAMES.allSer.name(),"allSer");

        if(!allSer.contains(ak)) {
            invocation.invoke();//如果服务未配置 直接放行
            return;
        }

        if(serSet!=null&&serSet.contains(ak)){
            flag=true;
        }

        if(flag) {
            invocation.invoke();
        } else {
            if(ReqKit.isAjaxRequest(controller.getRequest())){
                controller.renderUnauthorizationJSON("sm");
            }else {
                throw new CoreException("访问权限认证失败！");
            }
        }


    }

}
